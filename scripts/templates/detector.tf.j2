{%- if id is defined and id -%}
  {%- set id = id | lower -%}
{%- else -%}
  {%- set id = name | replace(' ', '_') | lower -%}
{% endif -%}
{%- if name | lower == 'heartbeat' -%}
  {%- set type = 'heartbeat' -%}
{%- else -%}
  {%- set type = 'threshold' -%}
{%- endif -%}
{%- set filtering_variable = 'base_filtering' -%}

resource "signalfx_detector" "{{ id }}" {
  name = format("%s %s", local.detector_name_prefix, "{{ module[0]|upper}}{{module[1:] }} {{ name | lower }}")

  authorized_writer_teams = var.authorized_writer_teams
  teams                   = try(coalescelist(var.teams, var.authorized_writer_teams), null)
  tags                    = compact(concat(local.common_tags, local.tags, var.extra_tags))
  {%- if type == 'heartbeat' %}

  max_delay = 900
  {%- endif %}

{%- for key, signal in signals.items() -%}
  {%- if loop.last -%}
    {%- if value_unit is defined %}

  viz_options {
    {%- if value_unit in ['Bit', 'Kilobit', 'Megabit', 'Gigabit', 'Terabit', 'Petabit', 'Exabit', 'Zettabit', 'Yottabit', 'Byte', 'Kibibyte','Mebibyte', 'Gigibyte', 'Tebibyte', 'Pebibyte', 'Exbibyte', 'Zebibyte', 'Yobibyte', 'Nanosecond', 'Microsecond', 'Millisecond', 'Second','Minute', 'Hour', 'Day', 'Week'] %}
    label      = "{{ key }}"
    value_unit = "{{ value_unit }}"
    {%- else %}
    label        = "{{ key }}"
    value_suffix = "{{ value_unit }}"
    {%- endif %}
  }
    {%- endif %}
  {%- endif %}
{%- endfor %}

  program_text = <<-EOF
    {%- if type == 'heartbeat' %}
    from signalfx.detectors.not_reporting import not_reporting
    {%- endif %}
    {%- if filtering is defined and filtering %}
    {{ filtering_variable }} = {{ filtering }}
    {%- endif %}

    {%- for key, signal in signals.items() -%}
      {%- if 'metric' in signal %}
    {{ key }} = data('{{ signal.metric }}', filter={%- if exclude_not_running_vm is defined and exclude_not_running_vm -%}${local.not_running_vm_filters} and {% endif -%}{%- if filtering is defined and filtering -%}{{ filtering_variable }} and {% endif -%}{%- if signal.filter is defined and signal.filter is string -%}{{ signal.filter }} and {% endif -%}${module.filtering.signalflow}{%- if signal.rollup is defined -%}, rollup='{{ signal.rollup }}'{% endif -%}{%- if signal.extrapolation is defined and signal.extrapolation -%}, extrapolation='{{ signal.extrapolation }}'{% endif -%})
        {%- if aggregation | default(true) %}${var.{{ id }}_aggregation_function}{%- endif %}
        {%- if transformation | default(true) %}${var.{{ id }}_transformation_function}{%- endif %}
      {%- endif -%}
      {%- if 'formula' in signal %}
    {{ key }} = {{ signal.formula }}
      {%- endif -%}
      {%- if loop.last -%}
    .publish('{{ key }}')
      {%- endif %}
    {%- endfor %}
    {%- macro macro_when(severity, rule) -%}
          when(signal {{ rule.comparator }} ${var.{{ id }}_threshold_{{ severity }}}, lasting=%{if var.{{ id }}_lasting_duration_{{ severity }} == null}None%{else}'${var.{{ id }}_lasting_duration_{{ severity }}}'%{endif}, at_least=${var.{{ id }}_at_least_percentage_{{ severity }}})
    {%- endmacro -%}
    {%- for severity, rule in rules.items() %}
      {%- if type == 'heartbeat' -%}
        {%- for key, signal in signals.items() -%}
          {%- if loop.last %}
    not_reporting.detector(stream={{ key }}, resource_identifier=None, duration='${var.heartbeat_timeframe}', auto_resolve_after='${local.heartbeat_auto_resolve_after}')
          {%- endif -%}
        {%- endfor -%}
      {%- else %}
    detect({{ macro_when(severity, rule) }} {%- if 'dependency' in rule %} and (not {{ macro_when(rule.dependency, rules[rule.dependency]) }}) {%- endif -%} )
      {%- endif -%}
    .publish('{{ severity | replace('critical', 'crit') | replace('warning', 'warn') | upper }}')
    {%- endfor %}
EOF

  {%- for severity, rule in rules.items() %}

  rule {
    {%- if type == 'heartbeat' %}
    description           = "has not reported in ${var.heartbeat_timeframe}"
    {%- else %}
      {%- if rule.description is defined and rule.description is string %}
        {%- set compare_string = rule.description %}
      {%- elif '>' in rule.comparator %}
        {%- set compare_string = 'is too high' %}
      {%- elif '<' in rule.comparator %}
        {%- set compare_string = 'is too low' %}
      {%- else %}
        {%- set compare_string = 'is' %}
      {%- endif %}
    description           = "{{ compare_string }} {{ rule.comparator }} ${var.{{ id }}_threshold_{{ severity }}}{{ value_unit | default("") }}"
    {%- endif %}
    severity              = "{{ severity | capitalize }}"
    detect_label          = "{{ severity | replace('critical', 'crit') | replace ('warning', 'warn') | upper }}"
    disabled              = coalesce({% if rules | length > 1 %}var.{{ id }}_disabled_{{ severity }}, {% endif %}var.{{ id }}_disabled, var.detectors_disabled)
    notifications         = coalescelist(lookup(var.{{ id }}_notifications, "{{ severity }}", []), var.notifications.{{ severity }})
    runbook_url           = try(coalesce(var.{{ id }}_runbook_url, var.runbook_url), "")
    tip                   = var.{{ id }}_tip
    parameterized_subject = var.message_subject == "" ? local.rule_subject{%- if type == 'heartbeat' -%}_novalue{% endif %} : var.message_subject
    parameterized_body    = var.message_body == "" ? local.rule_body : var.message_body
  }
  {%- endfor %}
}

