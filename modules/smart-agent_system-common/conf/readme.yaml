documentations:
  - name: Smart Agent monitor host-metadata
    url: 'https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/host-metadata.md'
  - name: Smart Agent monitor cpu
    url: 'https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/cpu.md'
  - name: Smart Agent monitor load
    url: 'https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/load.md'
  - name: Smart Agent monitor filesystems
    url: 'https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/filesystems.md'
  - name: Smart Agent monitor memory
    url: 'https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/memory.md'
  - name: Splunk Observability integration cpu
    url: 'https://docs.splunk.com/Observability/gdi/cpu/cpu.html'
  - name: Splunk Observability integration load
    url: 'https://docs.splunk.com/Observability/gdi/load/load.html'

source_doc: |
  ### Monitors

  #### Inodes

  To use inodes based detectors you must enable the `inodes` group in `extraGroups` parameter of the `filesystems` monitor configuration

  Inodes metrics areonly available for `Linux`).

  #### Space

  You can exclude squashfs filesystems from the collect using `fsTypes: ["!squashfs"]` parameter in the agent configuration.
  But we exclude it explicitly in related detector for safety to prevent any alert on this filesystem type.

  #### Load

  You have two choices to use load based detectors:
    - either keep the `agent_per_cpu_enabled` enabled (variable default value) __and__ define `perCPU: true` in the [load monitor](https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/load.md) configuration (for Kubernetes, you can use `loadPerCPU` option from the Helm chart available from `1.2.0` version).
    - or override the `agent_per_cpu_enabled` to `false` __and__ keep the default configuration for the [load monitor](https://github.com/signalfx/signalfx-agent/blob/main/docs/monitors/load.md) with `perCPU: false` or not defined

  In both cases, the goal is to get alerts based on the __ratio__ of load by dividing the original load per the number of CPU/cores which is the only way to get generic and relevant alerts for load.
  It mainly depends if you want to collect 2 metrics instead of 1 and if you want the load one to be raw or already averaged.

