documentations:
  - name: Smart Agent monitor postgresql
    url: 'https://docs.signalfx.com/en/latest/integrations/agent/monitors/postgresql.html'
  - name: Smart Agent monitor sql
    url: 'https://docs.signalfx.com/en/latest/integrations/agent/monitors/sql.html'

source_doc: |
  Check the [integration
  documentation](https://docs.signalfx.com/en/latest/integrations/integrations-reference/integrations.postgresql.html)
  in addition to the monitor one which it uses.

  ### Monitors

  The detectors in this module are based on metrics reported by the following monitors:

  * [postgresql](https://docs.signalfx.com/en/latest/integrations/agent/monitors/postgresql.html)

  The `postgresql` requires to enable the following `extraMetrics`:

  * `postgres_xact_rollbacks`
  * `postgres_xact_commits`
  * `postgres_conflicts`
  * `postgres_locks`
  * `postgres_pct_connections`
  * `postgres_replication_state`
  * `postgres_replication_lag`

  Some of them are available since agent version `v5.4.4` like the `replication` metric group.

  Others metrics could be collected from the `sql` monitor thanks to custom queries. See examples below.

  ### PostgreSQL

  You have to configure your PostgreSQL database to provide a user to collect metrics.

  And you also have to [enable statement tracking](https://www.postgresql.org/docs/9.3/pgstatstatements.html#AEN160631).
  More information available on
  [postgresl](https://docs.signalfx.com/en/latest/integrations/agent/monitors/postgresql.html#metrics-about-queries)
  monitor documentation.

  ### Examples

  Here is a sample configuration fragment for the SignalFx agent monitors:

  ```yaml
    - type: postgresql
      host: &psqlHost localhost
      port: &psqlPort 5432
      params: &psqlParams
        username: {"#from": "vault:secret/my-database[username]"}
        password: {"#from": "vault:secret/my-database[password]"}
      masterDBName: &psqlDBName postgres
      # Uncomment only if postgresql server is not on the same host as signalfx agent
      #disableHostDimensions: true
      extraDimensions: &psqlDimensions
        # Uncomment only if you enabled `disableHostDimensions` or for "serverless" mode.
        #host: *psqlHost
        # Always add this extraDimension.
        postgres_port: *psqlPort
      # You should not have to change lines below
      # Do not add host, port and dbname
      connectionString: "user={{.username}} password={{.password}} sslmode=disable"
      extraMetrics:
        - "postgres_xact_rollbacks"
        - "postgres_xact_commits"
        - "postgres_conflicts"
        - "postgres_locks"
        - "postgres_pct_connections"
        - "postgres_replication_state"
        - "postgres_replication_lag"
  # Example config to add custom queries:
  #  - type: sql
  #    dbDriver: postgres
  #    extraDimensions: *psqlDimensions
  #    params:
  #      << : [ {host: *psqlHost}, {port: *psqlPort}, {dbname: *psqlDBName}, *psqlParams ]
  #    connectionString: "host={{.host}} port={{.port}} dbname={{.dbname}} user={{.username}} password={{.password}} sslmode=disable"
  #    queries:
  #      - query: >-
  #          SELECT COUNT(*) AS count FROM mytable;
  #        metrics:
  #          - metricName: "postgres_example"
  #            valueColumn: "count"
  ```

  __Note__: By default this configuration is for [standard
  deployment](https://github.com/claranet/terraform-signalfx-detectors/wiki/Guidance#deployment-mode).
  You have to `disableHostDimensions: true` and add your PostgreSQL server as `host` dimension in `extraDimensions`.

notes: |
  * if you master database is protected you will need to override `databases` with the list of readable databases
  or monitor will fail to collect metrics.

  * the heartbeat detector works a little differently from other database modules because of its granularity.
  Indeed, metrics are sent "per database" basis so this detector could raise alert for a deleted databse
  in addition to the usual alert when the database server does not reponse anymore.

  * For metrics about queries execution time, you must enable `pg_stat_statements` extension which should be specified
  in the `shared_preload_libraries` config option in the main PostgreSQL configuration at server start up. Then, the
  extension must be enabled for each database by running `CREATE EXTENSION IF NOT EXISTS pg_stat_statements;` on each database.

  * Replica metrics are not available on Aurora
